#include "SessionSelector.h"
#include "common/test.pb.h"
#include "Config.h"
#include "session.h"

//class SessionSelector
//{
//public:
//	ISessionSelector() {};
//	virtual ~ISessionSelector() {};
//
//	virtual bool ParseData(const char* a_pCh, int count) = 0;
//};

SessionSelector::SessionSelector()
{

}

SessionSelector::~SessionSelector()
{

}

bool SessionSelector::ParseData(const char* a_pCh, int count)
{
	Certification certification;
	if (certification.ParseFromString(a_pCh))
	{
		if (certification.type() == Certification::eServer)
		{

		}
		else if (certification.type() == Certification::eClient)
		{

		}
		return true;
	}
	else
	{
		return false;
	}
	return false;
}

bool SessionSelector::OnConnect(CSession* a_pSession)
{
	CConfig *pConfig = CConfig::GetInstance();
	std::string strServerName;
	std::string strCode;
	if (pConfig->GetValue("ServerName", strServerName) && pConfig->GetValue("Code", strCode))
	{
		Certification certification;
		certification.set_type(Certification_TYPE_eServer);
		certification.set_name(strServerName);
		certification.set_code(strCode);
		std::string str = certification.SerializeAsString();
		a_pSession->Send(str.c_str(), str.size());
		return true;
	}
	SetErr(pConfig->GetErr());
	return false;
}
